#define YY_CHAR unsigned char
#line 1 "/u/icdc/rdt/tools/lib/flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "dmanScanner.l"
#define INITIAL 0
/* @(#) dmanScanner.l LexSource asterisk 1.14 93/03/11 14:00:05 (SCCS/s.dmanScanner.l) */
/*
 * Nom du Fichier : 	|>nom_fichier<|
 * Titre : 		|>Titre<|
 * Auteur:		|>auteur<|		
 * Date de creation :	|>dateCreation<|
 */
/* Description :
 *	Document de reference : |>doc<|
 *	Objet : |>objet<|
 *
 */
/* 
 * historique :
 * |>date<|	|>auteur<|	|>objet<|
 */
/* -------------- declaration section -------------- */
#define DANS_LIGNE 1
#define DANS_COMMENT 2
#define YY_DmanScanner_FLEX_SCANNER
#line 22 "dmanScanner.l"
static char SccsId[]="@(#) dmanScanner.l LexSource asterisk 1.14 93/03/11 14:00:05 (SCCS/s.dmanScanner.l)";
#include "dmanParser.h"
#define YY_NULL 0
#define YY_USER_ACTION BeginAction();
/* -------------- rules section -------------- */
#include "dmanScanner.h"
#line 52 "dmanScanner.l"
#line 196 "/u/icdc/rdt/tools/lib/flexskel.cc"

#define yy___stderr YY_DmanScanner_ERRFILE
#define yy___text YY_DmanScanner_TEXT
#define yy___leng YY_DmanScanner_LENG
#define yy___in YY_DmanScanner_IN
#define yy___out YY_DmanScanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_DmanScanner_INIT_BUFFER( yy_current_buffer, yy___in ); \
		YY_DmanScanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_DmanScanner_DEBUG != 0
#define yy___flex_debug YY_DmanScanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_DmanScanner_ECHO
#define yy___input YY_DmanScanner_INPUT
#define yy___fatal_error YY_DmanScanner_FATAL_ERROR
#define yy___wrap YY_DmanScanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_DmanScanner_IFILE  *yy_input_file;

    YY_DmanScanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_DmanScanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_DmanScanner_DEBUG != 0
int YY_DmanScanner_DEBUG_FLAG=YY_DmanScanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER yy_current_buffer
static YY_BUFFER_STATE yy_current_buffer;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_DmanScanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_DmanScanner_CHAR *yy___text;
int yy___leng;

YY_DmanScanner_IFILE  *yy___in = (YY_DmanScanner_IFILE  *) 0, *yy___out = (YY_DmanScanner_IFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_DmanScanner_CHAR *yy_c_buf_p = (YY_DmanScanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_DmanScanner_CHAR c, YY_DmanScanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_DmanScanner_ECHO_NOCODE
void YY_DmanScanner_CLASS::yy___echo()
{YY_DmanScanner_ECHO_CODE
}
#endif
#ifndef YY_DmanScanner_INPUT_NOCODE
int  YY_DmanScanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_DmanScanner_INPUT_CODE
}
#endif
#ifndef YY_DmanScanner_FATAL_ERROR_NOCODE
void YY_DmanScanner_CLASS::yy___fatal_error(char *msg)
{YY_DmanScanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_DmanScanner_WRAP_NOCODE
int  YY_DmanScanner_CLASS::yy___wrap()
{YY_DmanScanner_WRAP_CODE
}
#endif
void YY_DmanScanner_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 yy_current_buffer=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_DmanScanner_DEBUG != 0
 YY_DmanScanner_DEBUG_FLAG=YY_DmanScanner_DEBUG_INIT;
#endif
}

YY_DmanScanner_CLASS::YY_DmanScanner_CLASS(YY_DmanScanner_CONSTRUCTOR_PARAM) YY_DmanScanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_DmanScanner_CONSTRUCTOR_CODE;
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 98
typedef int yy_state_type;
static const short int yy_accept[137] =
    {   0,
        0,    0,    0,    0,    0,    0,   98,   95,    1,    2,
        2,    2,   94,   19,   90,    8,    7,   22,   12,   93,
       20,   21,   80,   86,   85,   84,   81,   35,   33,   37,
       41,   39,   83,   79,   43,   27,   25,   29,   31,   47,
       45,   49,   51,   74,   65,   67,   63,   69,   61,   77,
       55,   53,   57,   59,   72,   75,   34,   32,   36,   40,
       38,   82,   78,   42,   26,   24,   28,   30,   46,   44,
       48,   50,   73,   64,   66,   62,   68,   60,   76,   54,
       52,   56,   58,   71,   70,   18,   23,   91,   92,   92,
        1,    2,    2,    0,    0,    0,    9,    7,    7,    7,

       13,   17,   16,    3,    3,   18,   91,   92,   92,   88,
       89,   87,   10,    7,    7,    7,   14,   16,   11,    7,
        7,    7,   15,    7,    7,    7,    7,    7,    7,    4,
        7,    7,    5,    7,    6,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    6,    7,    6,    6,    8,    6,    6,    6,
        6,    6,    9,    6,   10,    6,    6,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    6,   13,
        6,   14,    6,    6,   15,   16,   17,   18,   19,   16,
       16,   20,   21,   16,   16,   16,   16,   22,   23,   16,
       16,   24,   25,   26,   16,   16,   16,   16,   16,   16,
        6,   27,    6,    6,   11,    6,   28,   11,   29,   30,

       31,   11,   11,   32,   33,   11,   11,   11,   11,   34,
       35,   11,   11,   36,   37,   38,   11,   11,   11,   11,
       11,   11,   39,    6,   40,    6,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       41,   42,    1,    1,    1,    1,    1,    1,   43,    1,
        1,    1,    1,   44,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,    1,   62,   63,
       64,   65,   66,   67,    1,   68,   69,   70,   71,   72,
       73,    1,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   83,   84,   85,   86,   87,   88,   89,   90,    1,
       91,   92,   93,   94,   95,   96,    1,   97,   98,   99,
      100,  101,  102,    1,  103
    } ;

static const YY_CHAR yy_meta[104] =
    {   0,
        1,    1,    2,    2,    2,    1,    1,    1,    1,    1,
        3,    1,    1,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1
    } ;

static const short int yy_base[141] =
    {   0,
        0,    0,  102,  103,  103,  106,  222,  223,  116,  223,
      223,  218,  223,  223,  113,  210,  120,  223,  205,  122,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  139,  223,    0,  216,  144,
      146,  223,  214,  208,  207,  206,  203,    0,  134,  135,

      198,  223,  209,  223,  207,  159,    0,  207,  206,  223,
      223,  223,  197,  140,  141,  140,  192,  202,  183,  149,
      143,  156,  177,  155,  154,  150,  153,  155,  159,    0,
      160,  160,    0,  162,    0,  223,  196,  153,  199,  202
    } ;

static const short int yy_def[141] =
    {   0,
      136,    1,    1,    1,  137,  137,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  138,  136,  136,  139,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  140,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  138,  138,  138,

      136,  136,  136,  136,  136,  136,  140,  136,  136,  136,
      136,  136,  136,  138,  138,  138,  136,  136,  136,  138,
      138,  138,  136,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,    0,  136,  136,  136,  136
    } ;

static const short int yy_nxt[327] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   13,   16,
       13,   17,   18,   19,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   20,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,

       83,   84,   85,   86,   86,   89,   89,   90,   89,   89,
       90,   13,   13,   13,   13,   87,   87,   91,   92,   92,
       93,   94,   95,  103,  104,  104,  105,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   99,
      106,   92,   92,   93,  100,  108,  109,   91,   92,   92,
       93,   99,  114,  115,  120,   98,  100,  121,  122,  116,
      106,   92,   92,   93,  114,  115,  124,  120,  125,  121,
      122,  116,  126,  127,  128,  129,  130,  131,  124,  132,
      125,  133,  134,  135,  126,  127,  128,  129,  130,  131,
      123,  132,  119,  133,  134,  135,   88,   88,   88,  102,

      102,  102,  107,  118,  107,  123,  119,  108,  108,  104,
      118,  117,  113,  112,  111,  110,   92,  108,  101,   97,
       92,  136,    7,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136
    } ;

static const short int yy_chk[327] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    3,    4,    5,    5,    5,    6,    6,
        6,    3,    4,    3,    4,    3,    4,    9,    9,    9,
        9,   15,   15,   20,   20,   20,   20,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   17,
       86,   86,   86,   86,   17,   90,   90,   91,   91,   91,
       91,   17,   99,  100,  114,  138,   17,  115,  116,  100,
      106,  106,  106,  106,   99,  100,  120,  114,  121,  115,
      116,  100,  122,  124,  125,  126,  127,  128,  120,  129,
      121,  131,  132,  134,  122,  124,  125,  126,  127,  128,
      123,  129,  119,  131,  132,  134,  137,  137,  137,  139,

      139,  139,  140,  118,  140,  117,  113,  109,  108,  105,
      103,  101,   97,   96,   95,   94,   93,   89,   19,   16,
       12,    7,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_DmanScanner_DEBUG != 0
static const short int yy_rule_linenum[97] =
    {   0,
       53,   54,   55,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   72,   73,   75,   76,   77,
       78,   79,   80,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
      109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
      119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
      149,  150,  151,  152,  154,  154

    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 370 "/u/icdc/rdt/tools/lib/flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_DmanScanner_LEX_DEFINED
YY_DmanScanner_LEX_RETURN YY_DmanScanner_LEX ( YY_DmanScanner_LEX_PARAM )
YY_DmanScanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_DmanScanner_LEX_RETURN YY_DmanScanner_CLASS::YY_DmanScanner_LEX ( YY_DmanScanner_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_DmanScanner_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 

/* % end of prolog */ 
#line 395 "/u/icdc/rdt/tools/lib/flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_DmanScanner_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_DmanScanner_OFILE_DEFAULT;

	if ( yy_current_buffer )
	    YY_DmanScanner_INIT_BUFFER( yy_current_buffer, yy___in );
	else
	    yy_current_buffer = YY_DmanScanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_DmanScanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 423 "/u/icdc/rdt/tools/lib/flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 137 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 136 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 434 "/u/icdc/rdt/tools/lib/flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 437 "/u/icdc/rdt/tools/lib/flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_DmanScanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_DmanScanner_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_DmanScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_DmanScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_DmanScanner_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_DmanScanner_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 53 "dmanScanner.l"
{BEGIN(INITIAL);}
	YY_BREAK
case 2:
#line 54 "dmanScanner.l"
{BEGIN(INITIAL);theLine++;theColumn=1;return DmanParser::TOK_LF;}
	YY_BREAK
case 3:
#line 55 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theLine++;theColumn=1;}
	YY_BREAK
case 4:
#line 57 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::CMD_HEADER;}
	YY_BREAK
case 5:
#line 58 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::CMD_SECTION;}
	YY_BREAK
case 6:
#line 59 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::CMD_SSECTION;}
	YY_BREAK
case 7:
#line 60 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::CMD_BAD;}
	YY_BREAK
case 8:
#line 61 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_ITEM1;}
	YY_BREAK
case 9:
#line 62 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_ITEM2;}
	YY_BREAK
case 10:
#line 63 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_ITEM3;}
	YY_BREAK
case 11:
#line 64 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_ITEM_BAD;}
	YY_BREAK
case 12:
#line 65 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_INDENT1;}
	YY_BREAK
case 13:
#line 66 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_INDENT2;}
	YY_BREAK
case 14:
#line 67 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_INDENT3;}
	YY_BREAK
case 15:
#line 68 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_INDENT_BAD;}
	YY_BREAK
case 16:
#line 72 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theChar=' ';return DmanParser::TOK_CHAR;}
	YY_BREAK
case 17:
#line 73 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theChar=theText[1];return DmanParser::TOK_CHAR;}
	YY_BREAK
case 18:
#line 75 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_SPACE;}
	YY_BREAK
case 19:
#line 76 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_DQUOTE;}
	YY_BREAK
case 20:
#line 77 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_BEGIN;}
	YY_BREAK
case 21:
#line 78 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_END;}
	YY_BREAK
case 22:
#line 79 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_INF;}
	YY_BREAK
case 23:
#line 80 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_SUP;}
	YY_BREAK
case 24:
#line 82 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="e'";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 25:
#line 83 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="E'";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 26:
#line 84 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="e`";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 27:
#line 85 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="E`";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 28:
#line 86 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="e^";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 29:
#line 87 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="E^";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 30:
#line 88 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="e:";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 31:
#line 89 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="E:";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 32:
#line 90 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="a'";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 33:
#line 91 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="A'";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 34:
#line 92 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="a`";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 35:
#line 93 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="A`";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 36:
#line 94 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="a^";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 37:
#line 95 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="A^";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 38:
#line 96 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="a:";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 39:
#line 97 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="A:";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 40:
#line 98 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="a~";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 41:
#line 99 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="A~";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 42:
#line 100 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="c,";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 43:
#line 101 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="C,";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 44:
#line 102 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="i'";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 45:
#line 103 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="I'";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 46:
#line 104 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="i`";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 47:
#line 105 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="I`";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 48:
#line 106 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="i^";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 49:
#line 107 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="I^";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 50:
#line 108 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="i:";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 51:
#line 109 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="I:";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 52:
#line 110 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="u'";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 53:
#line 111 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="U'";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 54:
#line 112 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="u`";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 55:
#line 113 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="U`";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 56:
#line 114 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="u^";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 57:
#line 115 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="U^";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 58:
#line 116 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="u:";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 59:
#line 117 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="U:";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 60:
#line 118 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="o:";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 61:
#line 119 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="U:";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 62:
#line 120 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="o^";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 63:
#line 121 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="O^";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 64:
#line 122 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="o`";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 65:
#line 123 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="O`";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 66:
#line 124 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="o'";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 67:
#line 125 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="O'";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 68:
#line 126 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="o~";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 69:
#line 127 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="O~";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 70:
#line 128 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="y:";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 71:
#line 129 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="y'";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 72:
#line 130 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="Y'";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 73:
#line 131 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="n~";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 74:
#line 132 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="N~";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 75:
#line 133 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="*8";return DmanParser::TOK_COMPOSED1;}
	YY_BREAK
case 76:
#line 134 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="o/";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 77:
#line 135 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="O/";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 78:
#line 136 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="*(ae";return DmanParser::TOK_COMPOSED1;}
	YY_BREAK
case 79:
#line 137 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="*(Ae";return DmanParser::TOK_COMPOSED1;}
	YY_BREAK
case 80:
#line 138 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="*!";return DmanParser::TOK_COMPOSED1;}
	YY_BREAK
case 81:
#line 139 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="*?";return DmanParser::TOK_COMPOSED1;}
	YY_BREAK
case 82:
#line 140 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="ao";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 83:
#line 141 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="Ao";return DmanParser::TOK_COMPOSED2;}
	YY_BREAK
case 84:
#line 142 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="*R";return DmanParser::TOK_COMPOSED1;}
	YY_BREAK
case 85:
#line 143 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="(co";return DmanParser::TOK_COMPOSED1;}
	YY_BREAK
case 86:
#line 144 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theString="(ct";return DmanParser::TOK_COMPOSED1;}
	YY_BREAK
case 87:
#line 145 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theChar='?';return DmanParser::TOK_CHAR;} /* mode debug parser/lexer */
	YY_BREAK
case 88:
#line 146 "dmanScanner.l"
{SetDebug(1);} /* mode debug parser/lexer */
	YY_BREAK
case 89:
#line 147 "dmanScanner.l"
{SetDebug(0);}
	YY_BREAK
case 90:
#line 148 "dmanScanner.l"
{BEGIN(DANS_COMMENT);}
	YY_BREAK
case 91:
#line 149 "dmanScanner.l"
{}
	YY_BREAK
case 92:
#line 150 "dmanScanner.l"
{BEGIN(INITIAL);theLine++;theColumn=1;}
	YY_BREAK
case 93:
#line 151 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_BAD;}
	YY_BREAK
case 94:
#line 152 "dmanScanner.l"
{BEGIN(DANS_LIGNE);theValue.theChar=theText[0];
                 return DmanParser::TOK_CHAR;}
	YY_BREAK
case 95:
#line 154 "dmanScanner.l"
{BEGIN(DANS_LIGNE);return DmanParser::TOK_BAD;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DANS_LIGNE):
case YY_STATE_EOF(DANS_COMMENT):
#line 155 "dmanScanner.l"
{ yyterminate();}
	YY_BREAK
case 97:
#line 156 "dmanScanner.l"
ECHO;
	YY_BREAK
#line 487 "/u/icdc/rdt/tools/lib/flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 535 "/u/icdc/rdt/tools/lib/flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &yy_current_buffer->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_DmanScanner_DEBUG != 0
#ifndef YY_DmanScanner_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_DmanScanner_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_DmanScanner_CHAR *dest = yy_current_buffer->yy_ch_buf;
    register YY_DmanScanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    yy_current_buffer->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    yy_current_buffer->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &yy_current_buffer->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_DmanScanner_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_DmanScanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
#line 711 "/u/icdc/rdt/tools/lib/flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 137 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 715 "/u/icdc/rdt/tools/lib/flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_DmanScanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 137 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 136);
#line 749 "/u/icdc/rdt/tools/lib/flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_DmanScanner_CHAR c, register YY_DmanScanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_DmanScanner_CHAR c;
register YY_DmanScanner_CHAR *yy_bp;
#endif
#else
void YY_DmanScanner_CLASS::yyunput( YY_DmanScanner_CHAR c, YY_DmanScanner_CHAR *yy_bp )
#endif

    {
    register YY_DmanScanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_DmanScanner_CHAR *dest =
	    &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
	register YY_DmanScanner_CHAR *source =
	    &yy_current_buffer->yy_ch_buf[number_to_move];

	while ( source > yy_current_buffer->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = yy_current_buffer->yy_buf_size;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_DmanScanner_CLASS::input()
#endif
    {
    int c;
    YY_DmanScanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_DmanScanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_DmanScanner_RESTART( YY_DmanScanner_IFILE  *input_file )
#else
void YY_DmanScanner_RESTART( input_file )
YY_DmanScanner_IFILE  *input_file;
#endif
#else
void YY_DmanScanner_CLASS::YY_DmanScanner_RESTART ( YY_DmanScanner_IFILE  *input_file )
#endif

    {
    YY_DmanScanner_INIT_BUFFER( yy_current_buffer, input_file );
    YY_DmanScanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_DmanScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_DmanScanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_DmanScanner_CLASS::YY_DmanScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( yy_current_buffer == new_buffer )
	return;

    if ( yy_current_buffer )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	yy_current_buffer->yy_buf_pos = yy_c_buf_p;
	yy_current_buffer->yy_n_chars = yy_n_chars;
	}

    yy_current_buffer = new_buffer;
    YY_DmanScanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_DmanScanner_LOAD_BUFFER_STATE( void )
#else
void YY_DmanScanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_DmanScanner_CLASS::YY_DmanScanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yy___text = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yy___in = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_DmanScanner_CREATE_BUFFER( YY_DmanScanner_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_DmanScanner_CREATE_BUFFER( file, size )
YY_DmanScanner_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_DmanScanner_CLASS::YY_DmanScanner_CREATE_BUFFER( YY_DmanScanner_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_DmanScanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_DmanScanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_DmanScanner_CREATE_BUFFER()" );

    YY_DmanScanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_DmanScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_DmanScanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_DmanScanner_CLASS::YY_DmanScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == yy_current_buffer )
	yy_current_buffer = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_DmanScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_DmanScanner_IFILE  *file )
#else
void YY_DmanScanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_DmanScanner_IFILE  *file;
#endif
#else
void YY_DmanScanner_CLASS::YY_DmanScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_DmanScanner_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 156 "dmanScanner.l"

/* -------------- body section -------------- */
void DmanScanner::BeginAction()
{theColumn+=theTextLength;
 };


/* parseur sur scanner */

class DmanConverter : private DmanScanner, 
                   public DmanParser
{protected:
 int Scan();
 public:
 void PrintError(char *s );
 DmanConverter();
 void SetDebug(int d);
 ~DmanConverter();
};
void DmanConverter::SetDebug(int d) 
{debugFlag=d;
 fprintf(stderr,"DEBUG MODE =%d\n",debugFlag);};
DmanConverter::DmanConverter() {debugFlag=0;};
DmanConverter::~DmanConverter() {};

int DmanConverter::Scan()
{
 theTokenLocation.first_line=theLine;
 theTokenLocation.first_column=theColumn;
 int t=DmanScanner::ScanValue(theTokenValue);
 theTokenLocation.last_line=theLine;
 theTokenLocation.last_column=theColumn;
 theTokenLocation.text=(char *)theText;
 if(debugFlag)
   {
    fprintf(stderr,"TOKEN %d (l%d,c%d-l%d,c%d)=(%d)\"%*.*s\"\n",t,
       theTokenLocation.first_line,
       theTokenLocation.first_column,
       theTokenLocation.last_line,
       theTokenLocation.last_column,
       theTextLength,theTextLength,
       theTextLength,theTokenLocation.text);
    }
 return t;
};

void DmanConverter::PrintError(char *s )
{fprintf(stderr,"%s\n",s);
 fprintf(stderr,"Stopped at or near token (line %d ,column %d -line %d ,column %d):\"%s\"\n",
      theTokenLocation.first_line, theTokenLocation.first_column,
      theTokenLocation.last_line, theTokenLocation.last_column,
      theTokenLocation.text);
 
};

int main(int argc,char **argv)
{
 DmanConverter theConverter;
 int nok;
 nok=theConverter.Parse();
 if(nok || theConverter.errorCount>0) 
    { fprintf(stderr,"%d Errors when parsing.\n",theConverter.errorCount);nok=1;}
 return( nok );
};
